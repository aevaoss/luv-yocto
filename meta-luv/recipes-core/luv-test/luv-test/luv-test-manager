#!/bin/bash
#
# Copyright 2014 Intel Corporation; author Matt Fleming
#

# ### Messages strings
# warn the user when no partition is found
alert_missing_partition="STOP! No partition found to store the results..please report to luv@lists.01.org"
# warn the user when the disk is nearly full
alert_disk_is_full="Removable disk space is running low , please backup and empty the disk to try again !!"

# ### Definitions for disk partitions and mount points
LUV_STORAGE=/mnt/luv-storage
LUV_STORAGE_UUID=05D6-1523
LUV_STORAGE_MIN_AVAIL=2000
LUV_EFI=/mnt/luv-efi/
LUV_EFI_UUID=423C-C2C8

LUV_SAVE_RAW_DIR=/dev/null
LUV_SAVE_PARSED_DIR=/dev/null
LUV_SAVE_RESULTS_DIR=/dev/null

grep -q noluv /proc/cmdline
if [ $? -ne 1 ]; then
    exit 0
fi

grep -q luv\.netboot /proc/cmdline
if [ $? -eq 0 ]; then
    echo "LUV booted from network..."
    LUVNETBOOT="1"
fi

grep -q luv\.debug /proc/cmdline
if [ $? -eq 0 ]; then
    echo "Enable LUV debug mode..."
    LUVDEBUG="1"
    set -x
    set -v
fi

plymouth_write() {
    /bin/plymouth display-message --text="$1"
}

plymouth_hide() {
    /bin/plymouth hide-message --text="$1"
}

html_start()
{
    html=$1
    echo "<!DOCTYPE html>" > $html
    echo "<html>" >> $html
    echo "<head>" >> $html
    echo "<title> "$luv_version" </title> " >> $html
    echo "<style>" >> $html
    cat /usr/share/luv/html/luv-css-styles >> $html
    echo "</style>" >> $html
    echo "<script type=\"text/javascript\">" >> $html
    cat /usr/share/luv/html/luv-scripts >> $html
    echo "</script>" >> $html
    echo "</head>" >> $html
    echo "<body>" >> $html
}

html_inline()
{
    awk -v HTML="${1}" '
    BEGIN {
        print "<div class=\"inline\">" >> HTML
    }
    {
        print $0
        print $0 "<br>">> HTML
    }
    END {
        print "</div>" >> HTML
    }'
}

html_finish()
{
    html=$1
    echo "</body>" >> $html
    echo "</html>" >> $html
}

# Test can be saved either to a disk or, when booting from the network,
# to a temporary location to be subsequently sent to a remote
# system for inspection.
# When saving to disk, in order to reliably identify the
# correct partition, mount using the disk's UUID. If the partition
# cannot be mounted, test execution is aborted.
# Also, if the space left on disk is less than 2MB, abort.

# booted from disk
if [ -z ${LUVNETBOOT} ]; then
    ls /dev/disk/by-uuid | grep -q ${LUV_STORAGE_UUID}
    if [ $? -eq 1 ] ; then
        plymouth_write "$alert_missing_partition"
        halt
    fi

    mkdir -p ${LUV_STORAGE}
    if [ $? -eq 0 ]; then
        mount /dev/disk/by-uuid/${LUV_STORAGE_UUID} ${LUV_STORAGE}
        if [ $? -eq 0 ]; then

            # check if there is enough space on disk
            m=$(df | grep ${LUV_STORAGE} | awk '{print $4}')
            if [ $m -le ${LUV_STORAGE_MIN_AVAIL} ] ; then
                plymouth_write "$alert_disk_is_full"
                halt
            fi
        fi
    fi

    mkdir -p ${LUV_EFI}
    if [ $? -eq 0 ]; then
        mount /dev/disk/by-uuid/${LUV_EFI_UUID} ${LUV_EFI}
    fi
# booted from network
else
    LUV_STORAGE=/tmp/luv-storage
    mkdir -p ${LUV_STORAGE}
fi

create_luv_dirs()
{
    tstamp=$(date +"%Y-%m-%d--%H-%M-%S")
    n=$(ls ${LUV_STORAGE}/ | grep $tstamp | wc -l)
    if [ $n -ge 1 ]; then
        LUV_SAVE_RESULTS_DIR=${LUV_STORAGE}/luv-results-$tstamp-$n/
    else
        LUV_SAVE_RESULTS_DIR=${LUV_STORAGE}/luv-results-$tstamp/
    fi

    mkdir -p ${LUV_SAVE_RESULTS_DIR}raw/
    [ $? -eq 0 ] && LUV_SAVE_RAW_DIR=${LUV_SAVE_RESULTS_DIR}raw/

    mkdir -p ${LUV_SAVE_RESULTS_DIR}parsed/
    [ $? -eq 0 ] && LUV_SAVE_PARSED_DIR=${LUV_SAVE_RESULTS_DIR}parsed
}

display_luv_version()
{
    luv_version=$(cut -d\\ -f1 /etc/issue)

    cat <<EOF | tee /dev/kmsg
    Welcome to ${luv_version}

    Running tests...
EOF
}

start_reports()
{
    # Start the HTML report
    # We need to export LUV_HTML_REPORT to be consumed by the LUV test parser
    export LUV_HTML_REPORT=${LUV_SAVE_RESULTS_DIR}/luv.html
    html_start ${LUV_HTML_REPORT}

    # Begin the results files by stating the version of luv
    cat <<EOF | html_inline ${LUV_HTML_REPORT} | tee -a /dev/kmsg \
        ${LUV_SAVE_RESULTS_DIR}/luv.results /tmp/luv.results
    $luv_version

    Date and time of the system : $tstamp

    System: $(cat /proc/cpuinfo | grep 'model name' | cut -d: -f2 | uniq) x $(nproc)

    Test results summary:

EOF
}

# Create a file the first time LUV boots. Create the LUV result folder
# with the current timestamp as suffix. Store this result folder name
# into a variable; should there be a reboot because of any test-suite,
# we want to have just one results folder and append the post reboot
# results to it.
if [ ! -e ${LUV_STORAGE}/first_boot  ]; then
    touch ${LUV_STORAGE}/first_boot

    create_luv_dirs

    display_luv_version

    start_reports

    echo LUV_SAVE_RESULTS_DIR=$LUV_SAVE_RESULTS_DIR > ${LUV_STORAGE}/first_boot
else
    LUV_SAVE_RESULTS_DIR=`grep LUV_SAVE_RESULTS_DIR ${LUV_STORAGE}/first_boot | cut -d "=" -f2`
    LUV_SAVE_RAW_DIR=${LUV_SAVE_RESULTS_DIR}raw/
    LUV_SAVE_PARSED_DIR=${LUV_SAVE_RESULTS_DIR}parsed
    export LUV_HTML_REPORT=${LUV_SAVE_RESULTS_DIR}/luv.html
fi

if [ ! -z ${LUVDEBUG} ]; then
    # once we know where our storage is, redirect output to a file there
    exec &> >(tee -a ${LUV_SAVE_RESULTS_DIR}luv-debug.log)
fi

plymouth_write "Running tests..."

#
# Every test must create a runner script and place it in $LUV_TESTS_DIR.
# See meta-luv/classes/luv-test.bbclass for details.
#
# Most also want to provide a testsuite log parser that converts the
# testsuite-specific output into the log schema defined in
# luv-test-parser.
#
LUV_TESTS_DIR=/etc/luv/tests/
LUV_PARSER_DIR=/etc/luv/parsers/

# all the messages from dmesg buffer comes with timestamp and since the
# user space messages are being directed to dmesg via /dev/kmsg, most of
# the messages miss the timestamp. In order to provide timestamp for each,
# parse each user space message line by line via /dev/kmsg

parse_line()
{
    while read line ; do
    case $line in
        *+* )
        echo ' ' $line
        ;;
        * )
        echo $line
        ;;
    esac
    done | tee /dev/kmsg
}

runner_list=`ls -A ${LUV_TESTS_DIR}`

# We can't get very accurate progress because we've no way of knowing
# how many unit tests each test suite includes. Use a coarse-grained
# progress step based on the number of test suites. The tests variable
# tracks the number of test suites which have completed running.
tests=0
progress_step="$((100/$(echo $runner_list | wc -w)))"
for r in $runner_list; do
    runner="${LUV_TESTS_DIR}$r"

    # if a test suite has already completed, do not run it again.
    grep -q $r ${LUV_STORAGE}/first_boot
    if [ $? -eq 0 ]; then
        continue
    fi

    #We display each test suite running for equal amount of time
    plymouth_hide "Running tests..."

    [ -f "$runner" ] || continue

    arr[tests]=$r
    if [ $tests -ge 1 ]; then
        plymouth_hide "Running ${arr[$((tests-1))]} ..."
    fi

    tests=$((tests+1))
    plymouth_write "Running $r ..."

    parser="${LUV_PARSER_DIR}/$r"
    [ -e ${parser} ] || {
        parser="/bin/cat"
    }

    # Make /dev/console silent to avoid the results being printed twice
    $runner |& tee -a ${LUV_SAVE_RAW_DIR}/$r | $parser | \
              tee -a ${LUV_SAVE_PARSED_DIR}/$r | ${LUV_PARSER_DIR}/test-manager | \
              parse_line | \
              tee -a /tmp/luv.results ${LUV_SAVE_RESULTS_DIR}/luv.results
    sync
    plymouth_hide "Running ${arr[-1]} ..."

    # Update the first_boot file with test_suites that have completed.
    echo $r >> ${LUV_STORAGE}/first_boot
done

cat ${LUV_SAVE_RESULTS_DIR}/luv.results | awk '/\[\+/  { units += 1 }
    /\[\-/ { suites += 1 }
    /pass/ { passes += 1 }
    /fail/ { fails += $3 }
    /skip/ { skips += 1 }
    /warn/ { warns += $3 }
    END {
	printf("\nRan %d testsuites and %d unittests, %d passes, %d fails, %d skipped, %d warnings.\n",
		suites, units, passes, fails, skips, warns) > "/tmp/testsuites"
    }'

cat /tmp/testsuites | html_inline ${LUV_HTML_REPORT} | tee -a /dev/kmsg /tmp/luv.results \
         ${LUV_SAVE_RESULTS_DIR}/luv.results

result=$(cat /tmp/testsuites)
plymouth_write "$result"
sleep 2

html_finish ${LUV_HTML_REPORT}

rm ${LUV_STORAGE}/first_boot

mountpoint -q ${LUV_EFI}
if [ $? -eq 0 ]; then
    umount ${LUV_EFI}
fi

# close debug log file before unmounting LUV_STORAGE.
if [ ! -z ${LUVDEBUG} ]; then
    exec &> /dev/console
fi

# dump dmesg, cpuinfo and acpi tables to luv results folder
luv-dmesg-acpi-tables-dump ${LUV_SAVE_RESULTS_DIR}

# invoke the script that saves/submits the results to a webserver.
submit_results ${LUV_SAVE_RESULTS_DIR}

mountpoint -q ${LUV_STORAGE}
if [ $? -eq 0 ]; then
    umount ${LUV_STORAGE}
    plymouth_write "Results were saved in your boot media. You may now turn off the system and remove it."
else
    plymouth_write "Results were not saved in storage media."
fi

grep -q luv.halt /proc/cmdline
if [ $? -ne 1 ]; then
    halt
fi

set +x
set +v
